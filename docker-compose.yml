version: "3"

services:
  # Frontend Web
  frontend-client:
    deploy:
      replicas: 1
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      API_HOST: ${API_HOST}
    # networks:
    #   - app_network
    ports:
      - "3000:3000"
    depends_on:
      - gateway

  # Auth service
  auth-service:
    deploy:
      replicas: 1
    build:
      context: ./backend/services/auth
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      AUTH_APP_PORT: ${AUTH_APP_PORT}
      AUTH_JWT_KEY: ${AUTH_JWT_KEY}
      AUTH_DB_HOST: ${AUTH_DB_HOST}
      AUTH_DB_USER: ${AUTH_DB_USER}
      AUTH_DB_PASSWORD: ${AUTH_DB_PASSWORD}
      AUTH_DB_NAME: ${AUTH_DB_NAME}
      AUTH_DB_PORT: ${AUTH_DB_PORT}
    command: air ./main.go -b 0.0.0.0
    # networks:
    #   - app_network
    ports:
      - "50051:50051"
    depends_on:
      - auth-db
    links:
      - auth-db

  auth-db:
    image: postgres
    restart: always
    deploy:
      replicas: 1
    volumes:
      - app_data:/var/lib/postgresql/auth/data
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
      POSTGRES_DB: ${AUTH_DB_NAME}
    # networks:
    #   - app_network

  # Chat service
  chat-service:
    deploy:
      replicas: 1
    build:
      context: ./backend/services/chat
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      CHATS_APP_PORT: ${CHATS_APP_PORT}
      CHATS_DB_HOST: ${CHATS_DB_HOST}
      CHATS_DB_USER: ${CHATS_DB_USER}
      CHATS_DB_PASSWORD: ${CHATS_DB_PASSWORD}
      CHATS_DB_NAME: ${CHATS_DB_NAME}
      CHATS_DB_PORT: ${CHATS_DB_PORT}
      CHATS_KAFKA_HOST: ${CHATS_KAFKA_HOST}
    # networks:
    #   - app_network
    ports:
      - "50053:50053"
    command: air ./main.go -b 0.0.0.0
    depends_on:
      - kafka-zookeeper
      - kafka-broker
      - chat-db
    links:
      - kafka-zookeeper
      - kafka-broker
      - chat-db

  chat-db:
    image: postgres
    deploy:
      replicas: 1
    restart: always
    volumes:
      - app_data:/var/lib/postgresql/chat/data
    environment:
      POSTGRES_USER: ${CHATS_DB_USER}
      POSTGRES_PASSWORD: ${CHATS_DB_PASSWORD}
      POSTGRES_DB: ${CHATS_DB_NAME}
    # networks:
    #   - app_network

  kafka-zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    # networks:
    #   - app_network

  kafka-broker:
    image: confluentinc/cp-kafka:7.3.2
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "kafka-zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:9092,PLAINTEXT_INTERNAL://kafka-broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    # networks:
    #   - app_network

  # Posts service
  posts-service:
    deploy:
      replicas: 1
    build:
      context: ./backend/services/posts
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      POSTS_APP_PORT: ${POSTS_APP_PORT}
      POSTS_DB_HOST: ${POSTS_DB_HOST}
      POSTS_DB_USER: ${POSTS_DB_USER}
      POSTS_DB_PASSWORD: ${POSTS_DB_PASSWORD}
      POSTS_DB_NAME: ${POSTS_DB_NAME}
      POSTS_DB_PORT: ${POSTS_DB_PORT}
    # networks:
    #   - app_network
    ports:
      - "50052:50052"
    command: air ./main.go -b 0.0.0.0
    depends_on:
      - posts-db
    links:
      - posts-db

  posts-db:
    image: postgres
    deploy:
      replicas: 1
    restart: always
    volumes:
      - app_data:/var/lib/postgresql/posts/data
    environment:
      POSTGRES_USER: ${POSTS_DB_USER}
      POSTGRES_PASSWORD: ${POSTS_DB_PASSWORD}
      POSTGRES_DB: ${POSTS_DB_NAME}
    # networks:
    #   - app_network

  # Gateway
  gateway:
    deploy:
      replicas: 1
    build:
      context: ./backend/gateway
      dockerfile: Dockerfile
    # networks:
    #   - app_network
    ports:
      - "8080:8080"
    command: air ./main.go -b 0.0.0.0
    depends_on:
      - auth-service
      - posts-service
      - chat-service

# networks:
#   app_network:
#     driver: overlay

volumes:
  app_data: