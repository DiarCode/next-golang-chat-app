version: "3"
services:
  # Frontend Web
  frontend_client:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      API_HOST: ${API_HOST}
    networks:
      - app_network
    ports:
      - "3000:3000"
    depends_on:
      - gateway

  # Auth service
  auth_service:
    build:
      context: ./backend/services/auth
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      AUTH_APP_PORT: ${AUTH_APP_PORT}
      AUTH_JWT_KEY: ${AUTH_JWT_KEY}
      AUTH_DB_HOST: ${AUTH_DB_HOST}
      AUTH_DB_USER: ${AUTH_DB_USER}
      AUTH_DB_PASSWORD: ${AUTH_DB_PASSWORD}
      AUTH_DB_NAME: ${AUTH_DB_NAME}
      AUTH_DB_PORT: ${AUTH_DB_PORT}
    command: air ./main.go -b 0.0.0.0
    networks:
      - app_network
    ports:
      - "50051:50051"
    depends_on:
      - auth_db
    links:
      - auth_db

  auth_db:
    image: postgres
    restart: always
    container_name: auth_db
    volumes:
      - app_data:/var/lib/postgresql/auth/data
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
      POSTGRES_DB: ${AUTH_DB_NAME}
    networks:
      - app_network

  # Chat service
  chat_service:
    build:
      context: ./backend/services/chat
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      CHATS_APP_PORT: ${CHATS_APP_PORT}
      CHATS_DB_HOST: ${CHATS_DB_HOST}
      CHATS_DB_USER: ${CHATS_DB_USER}
      CHATS_DB_PASSWORD: ${CHATS_DB_PASSWORD}
      CHATS_DB_NAME: ${CHATS_DB_NAME}
      CHATS_DB_PORT: ${CHATS_DB_PORT}
      CHATS_KAFKA_HOST: ${CHATS_KAFKA_HOST}
    networks:
      - app_network
    ports:
      - "50053:50053"
    command: air ./main.go -b 0.0.0.0
    depends_on:
      - kafka_zookeeper
      - kafka_broker
      - chat_db
    links:
      - kafka_zookeeper
      - kafka_broker
      - chat_db

  chat_db:
    image: postgres
    restart: always
    container_name: chat_db
    volumes:
      - app_data:/var/lib/postgresql/chat/data
    environment:
      POSTGRES_USER: ${CHATS_DB_USER}
      POSTGRES_PASSWORD: ${CHATS_DB_PASSWORD}
      POSTGRES_DB: ${CHATS_DB_NAME}
    networks:
      - app_network

  kafka_zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: kafka_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - app_network

  kafka_broker:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka_broker
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "kafka_zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka_broker:9092,PLAINTEXT_INTERNAL://kafka_broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - app_network

  # Posts service
  posts_service:
    build:
      context: ./backend/services/posts
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      POSTS_APP_PORT: ${POSTS_APP_PORT}
      POSTS_DB_HOST: ${POSTS_DB_HOST}
      POSTS_DB_USER: ${POSTS_DB_USER}
      POSTS_DB_PASSWORD: ${POSTS_DB_PASSWORD}
      POSTS_DB_NAME: ${POSTS_DB_NAME}
      POSTS_DB_PORT: ${POSTS_DB_PORT}
    networks:
      - app_network
    ports:
      - "50052:50052"
    command: air ./main.go -b 0.0.0.0
    depends_on:
      - posts_db
    links:
      - posts_db

  posts_db:
    image: postgres
    restart: always
    container_name: posts_db
    volumes:
      - app_data:/var/lib/postgresql/posts/data
    environment:
      POSTGRES_USER: ${POSTS_DB_USER}
      POSTGRES_PASSWORD: ${POSTS_DB_PASSWORD}
      POSTGRES_DB: ${POSTS_DB_NAME}
    networks:
      - app_network

  # Gateway
  gateway:
    build:
      context: ./backend/gateway
      dockerfile: Dockerfile
    container_name: gateway
    networks:
      - app_network
    ports:
      - "8080:8080"
    command: air ./main.go -b 0.0.0.0
    depends_on:
      - auth_service
      - posts_service
      - chat_service

networks:
  app_network:
    driver: bridge

volumes:
  app_data:
# version: "3"
# services:
#   # Frontend Web
#   frontend_client:
#     build:
#       context: ./frontend
#       dockerfile: Dockerfile
#     env_file:
#       - .env
#     ports:
#       - "3000:3000"
#     depends_on:
#       - gateway
#     links:
#       - gateway

#   # Auth service
#   auth_service:
#     build:
#       context: ./backend/services/auth
#       dockerfile: Dockerfile
#     env_file:
#       - .env
#     command: air ./main.go -b 0.0.0.0
#     ports:
#       - "50051:50051"
#     depends_on:
#       - auth_db
#     links:
#       - auth_db

#   auth_db:
#     image: postgres
#     restart: always
#     env_file:
#       - .env
#     environment:
#       POSTGRES_USER: ${AUTH_DB_USER}
#       POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
#       POSTGRES_DB: ${AUTH_DB_NAME}
#       POSTGRES_PORT: ${AUTH_DB_PORT}

#   # Chat service
#   chat_service:
#     build:
#       context: ./backend/services/chat
#       dockerfile: Dockerfile
#     ports:
#       - "50053:50053"
#     command: air ./main.go -b 0.0.0.0
#     depends_on:
#       - kafka_zookeeper
#       - kafka_broker
#       - chat_db
#     links:
#       - kafka_zookeeper
#       - kafka_broker
#       - chat_db

#   chat_db:
#     image: postgres
#     restart: always
#     environment:
#       POSTGRES_USER: ${CHATS_DB_USER}
#       POSTGRES_PASSWORD: ${CHATS_DB_PASSWORD}
#       POSTGRES_DB: ${CHATS_DB_NAME}
#       POSTGRES_PORT: ${CHATS_DB_PORT}

#   kafka_zookeeper:
#     image: confluentinc/cp-zookeeper:7.3.2
#     container_name: kafka_zookeeper
#     environment:
#       ZOOKEEPER_CLIENT_PORT: 2181
#       ZOOKEEPER_TICK_TIME: 2000
#     ports:
#       - 22181:2181

#   kafka_broker:
#     image: confluentinc/cp-kafka:7.3.2
#     container_name: kafka_broker
#     ports:
#       - "9092:9092"
#     depends_on:
#       - kafka_zookeeper
#     environment:
#       KAFKA_BROKER_ID: 1
#       KAFKA_ZOOKEEPER_CONNECT: "kafka_zookeeper:2181"
#       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
#       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka_broker:29092
#       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#       KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#       KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

#   # Posts service
#   posts_service:
#     build:
#       context: ./backend/services/posts
#       dockerfile: Dockerfile
#     ports:
#       - "50052:50052"
#     command: air ./main.go -b 0.0.0.0
#     depends_on:
#       - posts_db
#     links:
#       - posts_db

#   posts_db:
#     image: postgres
#     restart: always
#     environment:
#       POSTGRES_USER: ${POSTS_DB_USER}
#       POSTGRES_PASSWORD: ${POSTS_DB_PASSWORD}
#       POSTGRES_DB: ${POSTS_DB_NAME}
#       POSTGRES_PORT: ${POSTS_DB_PORT}

#   # Gateway
#   gateway:
#     build:
#       context: ./backend/gateway
#       dockerfile: Dockerfile
#     ports:
#       - "8080:8080"
#     command: air ./main.go -b 0.0.0.0
#     depends_on:
#       - auth_service
#       - posts_service
#       - chat_service
#     links:
#       - auth_service
#       - posts_service
#       - chat_service
